14 July 2011 (code last modified 11 May 2011 by Bill Jameson)

This is my final project for PHIL 4140 (Intermediate Logic) with Professor van Heuveln at RPI.

The primary component is a class (TruthTree.java) that provides a representation of a truth tree in propositional calculus, a mechanism that can be used to check the consistency of a set of statements.
TTTester.java is a very basic command-line interface for my truth tree class, allowing premises to be inserted into the root of the tree, decomposed/expanded according to a set of rules, and branches to be closed when a contradiction arises. A typical use case is checking whether a conclusion follows from a set of premises: adding the premises and the negation of the conclusion to the root and then expanding all possible statements until either all branches close (which shows that the negation of the conclusion is not consistent with the premises) or all expansions have been made and at least one branch remains open. The 
Input notation is lisp-style infix, with some limitations: the only logical operators supported are: and, or, not, if, iff (biconditional), and generalized conjunctions and disjunctions are only supported as far as conjunctions/disjunctions of conjunctions/disjunctions (e.g., (and P Q R) must be represented as (and P (and Q R)) ). I.e., all operators except "not" are binary only.
Upon running the tester (which contains the main method), you'll be prompted to enter the premises comprising the root of the tree. Note that at this point error-checking is not implemented, and detection of incorrect syntax is minimal. Once done, you can use the "help" command to list the available commands, "print" to display the tree in its current form, "quit" to exit, "expand" to decompose a statement whose number you will be prompted to indicate, "close" to indicate two contradictory statements (e.g., P, (not P) ) that will close a branch, or "done" to cause the program to check whether any more actions are possible/necessary.
The representation of the tree output by "print" assigns each statement a number, indicates which statement a branch originates from, indicates with a [O] whether the statement has already been expanded, and displays a [X] at the end of a branch that has been closed.